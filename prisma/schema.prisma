// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Rate          Rate[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Rate {
  id          String      @id @default(cuid())
  userCreated User        @relation(fields: [userId], references: [id])
  userId      String
  Comment     Comment?
  Faculty     Faculty?    @relation(fields: [facultyId], references: [id])
  facultyId   String?
  RateValue   RateValue[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Comment {
  id     String @id @default(cuid())
  text   String
  Rate   Rate   @relation(fields: [rateId], references: [id])
  rateId String @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model RateCategory {
  id        String      @id @default(cuid())
  name      String
  RateValue RateValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RateValue {
  id             String        @id @default(cuid())
  value          Int
  RateCategory   RateCategory? @relation(fields: [rateCategoryId], references: [id])
  rateCategoryId String?
  Rate           Rate?         @relation(fields: [rateId], references: [id])
  rateId         String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Department {
  id      String    @id @default(cuid())
  name    String
  Faculty Faculty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faculty {
  id           String      @id @default(cuid())
  name         String
  Rate         Rate[]
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
